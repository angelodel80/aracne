xquery version "3.0";

module namespace app="http://aracne/templates";

import module namespace templates="http://exist-db.org/xquery/templates" ;
import module namespace config="http://aracne/config" at "config.xqm";

(:~
 : This is a sample templating function. It will be called by the templating module if
 : it encounters an HTML element with an attribute data-template="app:test" 
 : or class="app:test" (deprecated). The function has to take at least 2 default
 : parameters. Additional parameters will be mapped to matching request or session parameters.
 : 
 : @param $node the HTML node with the attribute which triggered this call
 : @param $model a map containing arbitrary data - used to pass information between template calls
 :)
declare function app:test($node as node(), $model as map(*)) {
    <p>Dummy template output generated by function app:test at {current-dateTime()}. The templating
        function was triggered by the data-template attribute <code>data-template="app:test"</code>.</p>
};

(: https://atheek.wordpress.com/2011/12/20/adding-namespace-using-xquery/ :)
declare function app:addNamespaceToXML($noNamespaceXML as element(*),$namespaceURI as xs:string) as element(*)
{
element {QName($namespaceURI,fn:local-name($noNamespaceXML))}
{
$noNamespaceXML/@*,
for $node in $noNamespaceXML/node()
return
if (exists($node/node())) then app:addNamespaceToXML($node,$namespaceURI)
else if ($node instance of element()) then element {QName($namespaceURI,fn:local-name($node))}{$node/@*}
else $node }
};

declare function app:remove-empty-elements($element as element()) as element()? {
if ($element/* or $element/text())
  then 
   element {node-name($element)}
      {$element/@*,
          for $child in $element/node()
              return
               if ($child instance of element())
                 then app:remove-empty-elements($child)
                 else $child
      }
    else ()
};

(: Mainpage 
declare %templates:wrap function app:published-sites($node as node(), $model as map(*)){

    let $collections:=$config:sites
    
    let $content:=for $collection in $collections/collection
   
   (:let $coll:=concat($root,"/",$child)
    let $consistenza:=count(collection($coll))
    let $from:=browse:collection-from(util:eval($query))
    order by $child ascending:)
        return
            <p>{$collection/ctitle}, from {$collection/from} to {$collection/to}</p>        

    return
         app:make-panel('default',<div>{$content}</div>,"Running Projects",'')
};
:)
declare %templates:wrap function app:running-projects($node as node(), $model as map(*)){

    let $collections:=$config:collections/collection
    
    let $content:=if(count($collections)>0) then(
        for $collection in $collections

        return
            <p>{$collection/ctitle}, from {$collection/from} to {$collection/to}</p>        
    )
    else (
        <p>It seems that there are no collections in your Aracne installation. Let's start and <a href="admin/" target="blank">create your firstone</a>.</p>
        )       

    return
         app:make-panel('default',<div>{$content}</div>,"Running Projects",'')
};

declare function app:make-panel($class as xs:string,$content, $hContent as xs:string,$fContent as xs:string){
    <div class="panel panel-{$class}">
        <div class="panel-heading">{$hContent}</div>
        
        <div class="panel-body">{$content}</div>
        
        <div class="panel-footer">{$fContent}</div>
    </div>
};